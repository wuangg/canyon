From ddf97008e47af51c734c2f3ed574c03f9bd8d585 Mon Sep 17 00:00:00 2001
From: Andrew Steinborn <git@steinborn.me>
Date: Thu, 22 Aug 2019 23:12:21 -0400
Subject: [PATCH] Experimental new networking stack

This patch adds an experimental networking stack to Canyon, based on
Netty (the de facto networking library for Java). Netty is proven, and
it also powers every post-release Minecraft version from 1.7.2 onwards.

The primary benefit to using the Netty networking stack include improvements
to chunk loading times, login times, and overall smoother game play.
However, the implementation makes no attempt to support plugins that
modify the packet reader and writer to manipulate packets. An alternative
API may be provided in the future.

diff --git a/pom.xml b/pom.xml
index d5dcc0d44..a7cd26be2 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,6 +22,11 @@
     <url>https://github.com/Bukkit/CraftBukkit</url>
   </scm>
   <repositories>
+    <!-- Canyon: add velocity repo -->
+    <repository>
+      <id>velocity-repo</id>
+      <url>https://repo.velocitypowered.com/snapshots/</url>
+    </repository>
     <repository>
       <id>bukkit-repo</id>
       <url>https://raw.githubusercontent.com/canyonmodded/mc-server/main</url> <!-- Canyon: replace repo -->
@@ -76,17 +81,23 @@
       <type>jar</type>
       <scope>compile</scope>
     </dependency>
+    <!-- Canyon - include velocity-native -->
+    <dependency>
+      <groupId>com.velocitypowered</groupId>
+      <artifactId>velocity-native</artifactId>
+      <version>1.1.9</version>
+    </dependency>
     <dependency>
       <groupId>io.netty</groupId>
       <artifactId>netty-handler</artifactId>
-      <version>4.1.38.Final</version>
+      <version>4.1.49.Final</version>
       <type>jar</type>
       <scope>compile</scope>
     </dependency>
     <dependency>
       <groupId>io.netty</groupId>
       <artifactId>netty-transport-native-epoll</artifactId>
-      <version>4.1.38.Final</version>
+      <version>4.1.49.Final</version>
       <type>jar</type>
       <scope>compile</scope>
       <classifier>linux-x86_64</classifier>
@@ -94,7 +105,7 @@
     <dependency>
       <groupId>io.netty</groupId>
       <artifactId>netty-transport-native-kqueue</artifactId>
-      <version>4.1.38.Final</version>
+      <version>4.1.49.Final</version>
       <type>jar</type>
       <scope>compile</scope>
       <classifier>osx-x86_64</classifier>
diff --git a/src/main/java/com/canyonmodded/config/CanyonConfig.java b/src/main/java/com/canyonmodded/config/CanyonConfig.java
index d7dffe62d..971ac06c5 100644
--- a/src/main/java/com/canyonmodded/config/CanyonConfig.java
+++ b/src/main/java/com/canyonmodded/config/CanyonConfig.java
@@ -6,12 +6,14 @@ import java.io.File;
 
 public class CanyonConfig {
     // Add settings here. Make sure they're public visibility!
+    public static boolean useNewNetworkingStack = false;
 
     public static void loadConfiguration(File file) {
         Configuration configuration = new Configuration(file);
         configuration.load();
 
         // Load settings here.
+        useNewNetworkingStack = configuration.getBoolean("settings.use-new-networking-stack", false);
 
         configuration.save();
     }
diff --git a/src/main/java/com/canyonmodded/network/AsyncCapableNetHandler.java b/src/main/java/com/canyonmodded/network/AsyncCapableNetHandler.java
new file mode 100644
index 000000000..d645e7c99
--- /dev/null
+++ b/src/main/java/com/canyonmodded/network/AsyncCapableNetHandler.java
@@ -0,0 +1,4 @@
+package com.canyonmodded.network;
+
+public interface AsyncCapableNetHandler {
+}
diff --git a/src/main/java/com/canyonmodded/network/NettyBootstrap.java b/src/main/java/com/canyonmodded/network/NettyBootstrap.java
new file mode 100644
index 000000000..c23b12ceb
--- /dev/null
+++ b/src/main/java/com/canyonmodded/network/NettyBootstrap.java
@@ -0,0 +1,139 @@
+package com.canyonmodded.network;
+
+import com.velocitypowered.natives.util.Natives;
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.*;
+import io.netty.channel.epoll.Epoll;
+import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.kqueue.KQueue;
+import io.netty.channel.kqueue.KQueueEventLoopGroup;
+import io.netty.channel.kqueue.KQueueServerSocketChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.ServerSocketChannel;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.timeout.ReadTimeoutHandler;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.NetLoginHandler;
+
+import java.net.InetAddress;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+public class NettyBootstrap {
+    private Channel bound;
+    private final EventLoopGroup boss;
+    private final EventLoopGroup worker;
+    private final InetAddress bind;
+    private final int port;
+    private final MinecraftServer server;
+    private final List<NettyNetworkManager> connections = new CopyOnWriteArrayList<>();
+
+    public NettyBootstrap(InetAddress bind, int port, MinecraftServer server) {
+        this.server = server;
+        this.boss = createEventLoopGroup("boss");
+        this.worker = createEventLoopGroup("worker");
+        this.bind = bind;
+        this.port = port;
+    }
+
+    private EventLoopGroup createEventLoopGroup(String type) {
+        if (KQueue.isAvailable()) {
+            return new KQueueEventLoopGroup();
+        } else if (Epoll.isAvailable()) {
+            return new EpollEventLoopGroup();
+        } else {
+            return new NioEventLoopGroup();
+        }
+    }
+
+    private Class<? extends ServerSocketChannel> socketChannelType() {
+        if (KQueue.isAvailable()) {
+            return KQueueServerSocketChannel.class;
+        } else if (Epoll.isAvailable()) {
+            return EpollServerSocketChannel.class;
+        } else {
+            return NioServerSocketChannel.class;
+        }
+    }
+
+    private void logChannelType() {
+        if (KQueue.isAvailable()) {
+            MinecraftServer.log.info("Using kqueue channel type");
+        } else if (Epoll.isAvailable()) {
+            MinecraftServer.log.info("Using epoll channel type");
+        } else {
+            MinecraftServer.log.info("Using NIO channel type");
+        }
+        MinecraftServer.log.info("Using " + Natives.compress.getLoadedVariant() + " compression from Velocity");
+    }
+
+    public void bind() {
+        logChannelType();
+
+        new ServerBootstrap()
+                .group(boss, worker)
+                .channel(socketChannelType())
+                .childHandler(new ChannelInitializer<Channel>() {
+                    @Override
+                    protected void initChannel(Channel channel) throws Exception {
+                        channel.config().setOption(ChannelOption.IP_TOS, 24);
+
+                        NetLoginHandler handler = new NetLoginHandler(server, channel);
+                        channel.pipeline()
+                                .addLast("connection-manager", new ConnectionManagementHandler(NettyBootstrap.this, (NettyNetworkManager) handler.networkManager))
+                                .addLast("read-timeout", new ReadTimeoutHandler(30))
+                                .addLast("packet-decoder", new PacketDecoder())
+                                .addLast("packet-encoder", new PacketEncoder())
+                                .addLast("packet-handler", new NetworkManagerHandler(server, (NettyNetworkManager) handler.networkManager));
+                    }
+                })
+                .bind(bind, port)
+                .syncUninterruptibly()
+                .addListener((ChannelFutureListener) future -> {
+                    if (future.isSuccess()) {
+                        bound = future.channel();
+                    }
+                });
+    }
+
+    public void close() {
+        if (this.bound != null) {
+            this.bound.close().syncUninterruptibly();
+        }
+        this.worker.shutdownGracefully();
+        this.boss.shutdownGracefully();
+    }
+
+    public void flush() {
+        for (NettyNetworkManager manager : connections) {
+            manager.getChannel().flush();
+        }
+    }
+
+    private static class ConnectionManagementHandler implements ChannelHandler {
+
+        private final NettyBootstrap bootstrap;
+        private final NettyNetworkManager manager;
+
+        private ConnectionManagementHandler(NettyBootstrap bootstrap, NettyNetworkManager manager) {
+            this.bootstrap = bootstrap;
+            this.manager = manager;
+        }
+
+        @Override
+        public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
+            this.bootstrap.connections.add(manager);
+        }
+
+        @Override
+        public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
+            this.bootstrap.connections.remove(manager);
+        }
+
+        @Override
+        public void exceptionCaught(ChannelHandlerContext ctx, Throwable throwable) throws Exception {
+            // intentional no-op
+        }
+    }
+}
diff --git a/src/main/java/com/canyonmodded/network/NettyNetworkManager.java b/src/main/java/com/canyonmodded/network/NettyNetworkManager.java
new file mode 100644
index 000000000..fbb9433b9
--- /dev/null
+++ b/src/main/java/com/canyonmodded/network/NettyNetworkManager.java
@@ -0,0 +1,57 @@
+package com.canyonmodded.network;
+
+import io.netty.channel.Channel;
+import net.minecraft.server.*;
+
+public class NettyNetworkManager extends NetworkManager {
+    private final Channel channel;
+    private boolean closed = false;
+
+    public NettyNetworkManager(Channel channel, NetHandler nethandler) {
+        super(channel, nethandler);
+        this.channel = channel;
+    }
+
+    public Channel getChannel() {
+        return channel;
+    }
+
+    @Override
+    public void a() {
+        // This method interrupts the read-write threads for shutdown, but Netty stops reading when a channel is closed
+        // "for free".
+    }
+
+    @Override
+    public void a(String s, Object... aobject) {
+        super.a(s, aobject);
+        this.d();
+    }
+
+    @Override
+    public void d() {
+        // Actually disconnects the player
+        if (!this.closed) {
+            this.closed = true;
+            this.channel.close();
+        }
+    }
+
+    @Override
+    public void queue(Packet packet) {
+        this.channel.write(packet, this.channel.voidPromise());
+        if (isUrgentPacket(packet)) {
+            this.channel.flush();
+        }
+    }
+
+    private boolean isUrgentPacket(Packet packet) {
+        return packet instanceof Packet2Handshake || packet instanceof Packet1Login || packet instanceof Packet0KeepAlive
+                || packet instanceof Packet255KickDisconnect;
+    }
+
+    @Override
+    public void b() {
+        // No-op: only used in old networking stack for housekeeping tasks
+    }
+}
diff --git a/src/main/java/com/canyonmodded/network/NetworkManagerHandler.java b/src/main/java/com/canyonmodded/network/NetworkManagerHandler.java
new file mode 100644
index 000000000..25d4811be
--- /dev/null
+++ b/src/main/java/com/canyonmodded/network/NetworkManagerHandler.java
@@ -0,0 +1,60 @@
+package com.canyonmodded.network;
+
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.handler.timeout.ReadTimeoutException;
+import net.minecraft.server.*;
+
+import java.nio.channels.ClosedChannelException;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+
+public class NetworkManagerHandler extends SimpleChannelInboundHandler<Packet> {
+    private final MinecraftServer server;
+    private final NettyNetworkManager networkManager;
+    private final ScheduledFuture<?> tickHandler;
+
+    public NetworkManagerHandler(MinecraftServer server, NettyNetworkManager networkManager) {
+        this.server = server;
+        this.networkManager = networkManager;
+        this.tickHandler = networkManager.getChannel().eventLoop().scheduleAtFixedRate(() -> {
+            NetHandler h = networkManager.p;
+            if (h instanceof NetLoginHandler) {
+                ((NetLoginHandler) h).a();
+            } else if (h instanceof NetServerHandler) {
+                ((NetServerHandler) h).a();
+            }
+        }, 0, 50, TimeUnit.MILLISECONDS);
+    }
+
+    @Override
+    protected void channelRead0(ChannelHandlerContext ctx, Packet packet) throws Exception {
+        // Most, if not all, Minecraft packets must be processed on the main thread.
+        NetHandler nh = networkManager.p;
+        if (nh instanceof AsyncCapableNetHandler) {
+            packet.a(nh);
+        } else {
+            server.queueTask(() -> packet.a(nh));
+        }
+    }
+
+    @Override
+    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
+        networkManager.a("disconnect.closed");
+    }
+
+    @Override
+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
+        this.tickHandler.cancel(false);
+    }
+
+    @Override
+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
+        if (cause instanceof ReadTimeoutException) {
+            networkManager.a("disconnect.timeout");
+        } else if (!(cause instanceof ClosedChannelException)) {
+            networkManager.a(cause);
+        }
+    }
+}
diff --git a/src/main/java/com/canyonmodded/network/PacketDecoder.java b/src/main/java/com/canyonmodded/network/PacketDecoder.java
new file mode 100644
index 000000000..6d23f8ae4
--- /dev/null
+++ b/src/main/java/com/canyonmodded/network/PacketDecoder.java
@@ -0,0 +1,32 @@
+package com.canyonmodded.network;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufInputStream;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.ByteToMessageDecoder;
+import net.minecraft.server.Packet;
+
+import java.io.DataInputStream;
+import java.io.EOFException;
+import java.util.List;
+
+public class PacketDecoder extends ByteToMessageDecoder {
+    @Override
+    protected void decode(ChannelHandlerContext ctx, ByteBuf buf, List<Object> list) throws Exception {
+        // Minecraft Beta packets do not have a length - rather, the server "knows" the length of each packet it's going
+        // to read.
+        if (!buf.isReadable()) {
+            return;
+        }
+
+        ByteBuf packetBuf = buf.slice();
+        DataInputStream stream = new DataInputStream(new ByteBufInputStream(packetBuf));
+        try {
+            Packet packet = Packet.a(stream, true, true);
+            list.add(packet);
+            buf.skipBytes(packetBuf.readerIndex());
+        } catch (EOFException e) {
+            // We have to hold back for now and queue more data. The ByteToMessageDecoder will handle this for us.
+        }
+    }
+}
diff --git a/src/main/java/com/canyonmodded/network/PacketEncoder.java b/src/main/java/com/canyonmodded/network/PacketEncoder.java
new file mode 100644
index 000000000..69a7491d9
--- /dev/null
+++ b/src/main/java/com/canyonmodded/network/PacketEncoder.java
@@ -0,0 +1,76 @@
+package com.canyonmodded.network;
+
+import com.velocitypowered.natives.compression.VelocityCompressor;
+import com.velocitypowered.natives.util.MoreByteBufUtils;
+import com.velocitypowered.natives.util.Natives;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufOutputStream;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToByteEncoder;
+import io.netty.util.Recycler;
+import net.minecraft.server.Packet;
+import net.minecraft.server.Packet51MapChunk;
+
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.util.zip.DeflaterOutputStream;
+
+public class PacketEncoder extends MessageToByteEncoder<Packet> {
+    private final VelocityCompressor compressor = Natives.compress.get().create(-1);
+
+    @Override
+    protected void encode(ChannelHandlerContext ctx, Packet packet, ByteBuf buf) throws Exception {
+        DataOutputStream out = new DataOutputStream(new ByteBufOutputStream(buf));
+        if (packet instanceof Packet51MapChunk && ((Packet51MapChunk) packet).g == null) {
+            // CraftBukkit moves map chunk compression out of the main thread (good) but effectively makes it single
+            // threaded (bad). Compress the packets here instead, where we can take advantage of multiple cores.
+            this.handleCompressingMapChunk(ctx, (Packet51MapChunk) packet, buf, out);
+            return;
+        }
+        Packet.a(packet, out);
+    }
+
+    private void handleCompressingMapChunk(ChannelHandlerContext ctx, Packet51MapChunk packet, ByteBuf buf, DataOutputStream out) throws Exception {
+        Packet.a(packet, out);
+
+        final ByteBuf rawChunkData = Unpooled.wrappedBuffer(packet.rawData);
+        final ByteBuf compatibleIn = MoreByteBufUtils.ensureCompatible(ctx.alloc(), this.compressor, rawChunkData);
+        buf.writerIndex(buf.writerIndex() + 4);
+        final int startCompressed = buf.writerIndex();
+        int compressedLength;
+        try {
+            this.compressor.deflate(compatibleIn, buf);
+        } finally {
+            compressedLength = buf.writerIndex() - startCompressed;
+            compatibleIn.release();
+        }
+        buf.setInt(startCompressed - 4, compressedLength);
+        packet.k = true;
+    }
+
+    @Override
+    protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, Packet packet, boolean preferDirect) throws Exception {
+        byte[] rawChunkData;
+        if (packet instanceof Packet51MapChunk && (rawChunkData = ((Packet51MapChunk) packet).rawData) != null) {
+            // the amount of bytes in an uncompressed map chunk packet always is:
+            //    4(int) + 2(short) + 4(int) + 3(byte) + 4(int) + (n(the length of rawData byte[]) * 1(byte))
+            //
+            // we allocate uncompressed bytes plus 1 byte, this cover two cases:
+            // - compression
+            //    according to https://github.com/ebiggers/libdeflate/blob/master/libdeflate.h#L103,
+            //    if the data compresses well (and we do not have some pathological case) then the maximum
+            //    size the compressed size will ever be is the input size minus one.
+            // - uncompressed
+            //    this is fairly obvious - we will then have one more than the uncompressed size.
+            final int initialSize = 17 + rawChunkData.length + 1;
+            return MoreByteBufUtils.preferredBuffer(ctx.alloc(), this.compressor, initialSize);
+        }
+        return super.allocateBuffer(ctx, packet, preferDirect);
+    }
+
+    @Override
+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
+        this.compressor.close();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 182e905ad..2428fe96a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -4,18 +4,17 @@ import java.awt.GraphicsEnvironment;
 import java.io.File;
 import java.io.IOException;
 import java.net.InetAddress;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
+import java.util.*;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 // CraftBukkit start
 import java.io.PrintStream;
 import java.net.UnknownHostException;
+
+import com.canyonmodded.network.NettyBootstrap;
+import io.netty.util.concurrent.FastThreadLocalThread;
 import jline.ConsoleReader;
 import joptsimple.OptionSet;
 import org.bukkit.World.Environment;
@@ -37,6 +36,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
     public static Logger log = Logger.getLogger("Minecraft");
     public static HashMap trackerList = new HashMap();
     public NetworkListenThread networkListenThread;
+    private NettyBootstrap nettyBootstrap; // Canyon
     public PropertyManager propertyManager;
     // public WorldServer[] worldServer; // CraftBukkit - removed!
     public ServerConfigurationManager serverConfigurationManager;
@@ -119,6 +119,10 @@ public class MinecraftServer implements Runnable, ICommandListener {
     private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL));
     // Canyon end
 
+    // Canyon start - task queue for main thread, to support Netty
+    private final Queue<Runnable> queuedMainTasks = new ConcurrentLinkedDeque<>();
+    // Canyon end
+
     public MinecraftServer(OptionSet options) { // CraftBukkit - adds argument OptionSet
         new ThreadSleepForever(this);
 
@@ -168,7 +172,8 @@ public class MinecraftServer implements Runnable, ICommandListener {
 
         int i = this.propertyManager.getInt("server-port", 25565);
 
-        log.info("Starting Minecraft server on " + (s.length() == 0 ? "*" : s) + ":" + i);
+        // Canyon start - moved below
+/*        log.info("Starting Minecraft server on " + (s.length() == 0 ? "*" : s) + ":" + i);
 
         try {
             this.networkListenThread = new NetworkListenThread(this, inetaddress, i);
@@ -177,7 +182,8 @@ public class MinecraftServer implements Runnable, ICommandListener {
             log.log(Level.WARNING, "The exception was: " + ioexception.toString());
             log.warning("Perhaps a server is already running on that port?");
             return false;
-        }
+        }*/
+        // Canyon end
 
         if (false) { //if (!this.onlineMode) { // Canyon - Mojang has killed off online mode auth for beta Minecraft
             log.warning("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
@@ -187,6 +193,24 @@ public class MinecraftServer implements Runnable, ICommandListener {
         }
 
         this.serverConfigurationManager = new ServerConfigurationManager(this);
+        // Canyon start - moved binding here so we have access to CanyonConfig
+        log.info("Starting Minecraft server on " + (s.length() == 0 ? "*" : s) + ":" + i);
+
+        try {
+            if (com.canyonmodded.config.CanyonConfig.useNewNetworkingStack) {
+                this.nettyBootstrap = new com.canyonmodded.network.NettyBootstrap(inetaddress, i, this);
+                this.nettyBootstrap.bind();
+            } else {
+                this.networkListenThread = new NetworkListenThread(this, inetaddress, i);
+            }
+        } catch (Throwable ioexception) { // CraftBukkit - IOException -> Throwable
+            log.warning("**** FAILED TO BIND TO PORT!");
+            log.log(Level.WARNING, "The exception was: " + ioexception.toString());
+            log.warning("Perhaps a server is already running on that port?");
+            if (this.nettyBootstrap != null) this.nettyBootstrap.close();
+            return false;
+        }
+        // Canyon end
         // CraftBukkit - removed trackers
         long j = System.nanoTime();
         String s1 = this.propertyManager.getString("level-name", "world");
@@ -501,6 +525,12 @@ public class MinecraftServer implements Runnable, ICommandListener {
         }
     }
 
+    // Canyon start
+    public void queueTask(Runnable runnable) {
+        this.queuedMainTasks.add(runnable);
+    }
+    // Canyon end
+
     private void h() {
         ArrayList arraylist = new ArrayList();
         Iterator iterator = trackerList.keySet().iterator();
@@ -526,6 +556,18 @@ public class MinecraftServer implements Runnable, ICommandListener {
         Vec3D.a();
         ++this.ticks;
 
+        // Canyon start - queued main thread tasks
+        int toRun = this.queuedMainTasks.size();
+        Runnable task;
+        while (toRun-- >= 0 && (task = this.queuedMainTasks.poll()) != null) {
+            try {
+                task.run();
+            } catch (Exception e) {
+                log.log(Level.SEVERE, "Exception processing server task", e);
+            }
+        }
+        // Canyon end
+
         ((CraftScheduler) this.server.getScheduler()).mainThreadHeartbeat(this.ticks); // CraftBukkit
 
         for (j = 0; j < this.worlds.size(); ++j) { // CraftBukkit
@@ -551,7 +593,8 @@ public class MinecraftServer implements Runnable, ICommandListener {
             }
         // } // CraftBukkit
 
-        this.networkListenThread.a();
+        if (this.networkListenThread != null) this.networkListenThread.a(); // Canyon
+        if (this.nettyBootstrap != null) this.nettyBootstrap.flush(); // Canyon
         this.serverConfigurationManager.b();
 
         // CraftBukkit start
@@ -602,7 +645,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
 
             // CraftBukkit - remove gui
 
-            (new ThreadServerApplication("Server thread", minecraftserver)).start();
+            (new FastThreadLocalThread(null, minecraftserver, "Server thread")).start(); // Canyon - use fast thread local
         } catch (Exception exception) {
             log.log(Level.SEVERE, "Failed to start the minecraft server", exception);
         }
diff --git a/src/main/java/net/minecraft/server/NetLoginHandler.java b/src/main/java/net/minecraft/server/NetLoginHandler.java
index 99e775b8b..213470108 100644
--- a/src/main/java/net/minecraft/server/NetLoginHandler.java
+++ b/src/main/java/net/minecraft/server/NetLoginHandler.java
@@ -1,10 +1,12 @@
 package net.minecraft.server;
 
+import com.canyonmodded.network.NettyNetworkManager;
+
 import java.net.Socket;
 import java.util.Random;
 import java.util.logging.Logger;
 
-public class NetLoginHandler extends NetHandler {
+public class NetLoginHandler extends NetHandler implements com.canyonmodded.network.AsyncCapableNetHandler { // Canyon
 
     public static Logger a = Logger.getLogger("Minecraft");
     private static Random d = new Random();
@@ -22,6 +24,21 @@ public class NetLoginHandler extends NetHandler {
         this.networkManager.f = 0;
     }
 
+    // Canyon start - alternative networking stack
+    public NetLoginHandler(MinecraftServer minecraftserver, io.netty.channel.Channel ch) {
+        this.server = minecraftserver;
+        this.networkManager = new NettyNetworkManager(ch, this);
+        this.networkManager.f = 0;
+    }
+
+    public io.netty.channel.Channel getChannel() {
+        if (this.networkManager instanceof com.canyonmodded.network.NettyNetworkManager) {
+            return ((com.canyonmodded.network.NettyNetworkManager) this.networkManager).getChannel();
+        }
+        return null;
+    }
+    // Canyon end
+
     // CraftBukkit start
     public Socket getSocket() {
         return this.networkManager.socket;
@@ -30,7 +47,10 @@ public class NetLoginHandler extends NetHandler {
 
     public void a() {
         if (this.h != null) {
-            this.b(this.h);
+            // Canyon start - post to main thread
+            final Packet1Login loginPacket = this.h;
+            server.queueTask(() -> this.b(loginPacket));
+            // Canyon end
             this.h = null;
         }
 
@@ -71,7 +91,7 @@ public class NetLoginHandler extends NetHandler {
             }
         } else {
             if (!this.server.onlineMode) {
-                this.b(packet1login);
+                server.queueTask(() -> this.b(packet1login)); // Canyon - post to main thread
             } else {
                 (new ThreadLoginVerifier(this, packet1login, this.server.server)).start(); // CraftBukkit
             }
@@ -96,7 +116,7 @@ public class NetLoginHandler extends NetHandler {
             // this.server.serverConfigurationManager.sendAll(new Packet3Chat("\u00A7e" + entityplayer.name + " joined the game."));  // CraftBukkit - message moved to join event
             this.server.serverConfigurationManager.c(entityplayer);
             netserverhandler.a(entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
-            this.server.networkListenThread.a(netserverhandler);
+            if (this.server.networkListenThread != null) this.server.networkListenThread.a(netserverhandler); // Canyon
             netserverhandler.sendPacket(new Packet4UpdateTime(entityplayer.getPlayerTime())); // CraftBukkit - add support for player specific time
             entityplayer.syncInventory();
         }
@@ -110,6 +130,7 @@ public class NetLoginHandler extends NetHandler {
     }
 
     public void a(Packet packet) {
+        MinecraftServer.log.severe("Didn't expect packet " + packet + "!");
         this.disconnect("Protocol error");
     }
 
diff --git a/src/main/java/net/minecraft/server/NetServerHandler.java b/src/main/java/net/minecraft/server/NetServerHandler.java
index a82413119..68dcfca12 100644
--- a/src/main/java/net/minecraft/server/NetServerHandler.java
+++ b/src/main/java/net/minecraft/server/NetServerHandler.java
@@ -649,7 +649,7 @@ public class NetServerHandler extends NetHandler implements ICommandListener {
                 this.networkManager.queue(new Packet3Chat(line));
             }
             packet = null;
-        } else if (packet.k == true) {
+        } else if (packet.k && !(this.networkManager instanceof com.canyonmodded.network.NettyNetworkManager)) { // Canyon
             // Reroute all low-priority packets through to compression thread.
             ChunkCompressionThread.sendPacket(this.player, packet);
             packet = null;
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 11cf7db87..856189308 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -24,7 +24,7 @@ public class NetworkManager {
     private List m = Collections.synchronizedList(new ArrayList());
     private List highPriorityQueue = Collections.synchronizedList(new ArrayList());
     private List lowPriorityQueue = Collections.synchronizedList(new ArrayList());
-    private NetHandler p;
+    public NetHandler p; // Canyon - private -> public
     private boolean q = false;
     private Thread r;
     private Thread s;
@@ -38,6 +38,13 @@ public class NetworkManager {
     public int f = 0;
     private int lowPriorityQueueDelay = 50;
 
+    // Canyon start - alternative constructor
+    public NetworkManager(io.netty.channel.Channel ch, NetHandler nethandler) {
+        this.i = ch.remoteAddress();
+        this.p = nethandler;
+    }
+    // Canyon end
+
     public NetworkManager(Socket socket, String s, NetHandler nethandler) {
         this.socket = socket;
         this.i = socket.getRemoteSocketAddress();
@@ -169,8 +176,7 @@ public class NetworkManager {
         }
     }
 
-    private void a(Exception exception) {
-        exception.printStackTrace();
+    public void a(Throwable exception) { // Canyon - private -> public, Exception -> Throwable
         this.a("disconnect.genericReason", new Object[] { "Internal exception: " + exception.toString()});
     }
 
@@ -179,6 +185,12 @@ public class NetworkManager {
             this.t = true;
             this.u = s;
             this.v = aobject;
+            // Canyon start - new networking stack
+            if (this.socket == null) {
+                this.p.a(s, aobject);
+                return;
+            }
+            // Canyon end
             (new NetworkMasterThread(this)).start();
             this.l = false;
 
diff --git a/src/main/java/net/minecraft/server/Packet.java b/src/main/java/net/minecraft/server/Packet.java
index f83acc410..525c00ff8 100644
--- a/src/main/java/net/minecraft/server/Packet.java
+++ b/src/main/java/net/minecraft/server/Packet.java
@@ -56,8 +56,14 @@ public abstract class Packet {
         return ((Integer) b.get(this.getClass())).intValue();
     }
 
-    // CraftBukkit - throws IOException
+    // Canyon start - retain compatibility with old network stack
     public static Packet a(DataInputStream datainputstream, boolean flag) throws IOException {
+        return a(datainputstream, flag, false);
+    }
+    // Canyon end
+
+    // CraftBukkit - throws IOException
+    public static Packet a(DataInputStream datainputstream, boolean flag, boolean netty) throws IOException { // Canyon
         boolean flag1 = false;
         Packet packet = null;
 
@@ -80,6 +86,7 @@ public abstract class Packet {
 
             packet.a(datainputstream);
         } catch (EOFException eofexception) {
+            if (netty) throw eofexception; // Canyon - special netty flag
             System.out.println("Reached end of stream");
             return null;
         }
diff --git a/src/main/java/net/minecraft/server/Packet10Flying.java b/src/main/java/net/minecraft/server/Packet10Flying.java
index 7bf2f6713..66a440b93 100644
--- a/src/main/java/net/minecraft/server/Packet10Flying.java
+++ b/src/main/java/net/minecraft/server/Packet10Flying.java
@@ -22,7 +22,7 @@ public class Packet10Flying extends Packet {
     }
 
     public void a(DataInputStream datainputstream) throws java.io.IOException { // Canyon - fix decompile
-        this.g = datainputstream.read() != 0;
+        this.g = datainputstream.readBoolean(); // Canyon - ensure EOFException is thrown if the status byte is not there
     }
 
     public void a(DataOutputStream dataoutputstream) throws java.io.IOException { // Canyon - fix decompile
diff --git a/src/main/java/net/minecraft/server/Packet51MapChunk.java b/src/main/java/net/minecraft/server/Packet51MapChunk.java
index 3bf163f62..f740396d6 100644
--- a/src/main/java/net/minecraft/server/Packet51MapChunk.java
+++ b/src/main/java/net/minecraft/server/Packet51MapChunk.java
@@ -84,6 +84,11 @@ public class Packet51MapChunk extends Packet {
         dataoutputstream.write(this.d - 1);
         dataoutputstream.write(this.e - 1);
         dataoutputstream.write(this.f - 1);
+        // Canyon start - write the compressed data later in our packet encoder
+        if (this.g == null) {
+            return;
+        }
+        // Canyon end
         dataoutputstream.writeInt(this.h);
         dataoutputstream.write(this.g, 0, this.h);
     }
diff --git a/src/main/java/net/minecraft/server/ThreadLoginVerifier.java b/src/main/java/net/minecraft/server/ThreadLoginVerifier.java
index 4d98e6ada..306db21c9 100644
--- a/src/main/java/net/minecraft/server/ThreadLoginVerifier.java
+++ b/src/main/java/net/minecraft/server/ThreadLoginVerifier.java
@@ -37,11 +37,18 @@ class ThreadLoginVerifier extends Thread {
             bufferedreader.close();
             if (s1.equals("YES")) {
                 // CraftBukkit start
-                if (this.netLoginHandler.getSocket() == null) {
+                // Canyon start - new networking stack
+                java.net.InetAddress remoteAddr;
+                if (this.netLoginHandler.getSocket() != null) {
+                    remoteAddr = this.netLoginHandler.getSocket().getInetAddress();
+                } else if (this.netLoginHandler.getChannel() != null && this.netLoginHandler.getChannel().isActive()) {
+                    remoteAddr = ((java.net.InetSocketAddress) this.netLoginHandler.getChannel().remoteAddress()).getAddress();
+                } else {
                     return;
                 }
 
-                PlayerPreLoginEvent event = new PlayerPreLoginEvent(this.loginPacket.name, this.netLoginHandler.getSocket().getInetAddress());
+                PlayerPreLoginEvent event = new PlayerPreLoginEvent(this.loginPacket.name, remoteAddr);
+                // Canyon end
                 this.server.getPluginManager().callEvent(event);
 
                 if (event.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
-- 
2.47.0.windows.2

